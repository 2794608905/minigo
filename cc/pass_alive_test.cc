// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <set>
#include <string>
#include <utility>
#include <vector>

#include "absl/strings/ascii.h"
#include "absl/strings/str_format.h"
#include "cc/constants.h"
#include "cc/logging.h"
#include "cc/position.h"
#include "cc/random.h"
#include "cc/test_utils.h"
#include "gtest/gtest.h"

namespace minigo {
namespace {

// Copied out of Position::ToPrettyString because it operates on an array of
// Stones, not Colors and we can't construct a Position from the results of
// filling pass-alive regions with stones because the filled areas would
// suicide :(
std::string ToPrettyString(const std::array<Color, kN * kN>& stones) {
  std::ostringstream oss;

  auto format_cols = [&oss]() {
    oss << "   ";
    for (int i = 0; i < kN; ++i) {
      oss << Coord::kGtpColumns[i] << " ";
    }
  };

  const char* print_white = "\x1b[0;31;47m";
  const char* print_black = "\x1b[0;31;40m";
  const char* print_empty = "\x1b[0;31;43m";
  const char* print_normal = "\x1b[0m";

  format_cols();
  oss << "\n";
  for (int row = 0; row < kN; ++row) {
    oss << absl::StreamFormat("%2d ", kN - row);
    for (int col = 0; col < kN; ++col) {
      Coord c(row, col);
      auto color = stones[c];
      if (color == Color::kWhite) {
        oss << print_white << "O ";
      } else if (color == Color::kBlack) {
        oss << print_black << "X ";
      } else {
        oss << print_empty << ". ";
      }
    }
    oss << print_normal << absl::StreamFormat("%2d", kN - row);
    oss << "\n";
  }
  format_cols();
  return oss.str();
}

class PassAliveTest : public ::testing::Test {
 protected:
  struct TestCase {
    TestCase(const std::string& board, const std::string& expected)
        : board(board), expected(ParseBoard(expected)) {}

    TestablePosition board;
    std::array<Color, kN * kN> expected;
  };

  void RunTests(absl::Span<const TestCase> tests) {
    for (const auto& test : tests) {
      MG_LOG(INFO) << "board state:\n" << test.board.ToPrettyString();
      MG_LOG(INFO) << "Calculating black pass-alive regions";
      auto black = test.board.CalculatePassAliveRegions(Color::kBlack);

      MG_LOG(INFO) << "Calculating white pass-alive regions";
      auto white = test.board.CalculatePassAliveRegions(Color::kWhite);

      // Initialize the result to the input board state.
      std::array<Color, kN * kN> actual;
      for (size_t i = 0; i < kN * kN; ++i) {
        actual[i] = test.board.stones()[i].color();
      }

      // Merge both pass-alive regions into the result.
      for (size_t i = 0; i < kN * kN; ++i) {
        MG_CHECK(black[i] == Color::kEmpty || white[i] == Color::kEmpty)
            << Coord(i).ToGtp()
            << " was marked as belonging to both black & white pass-alive "
               "regions";
        if (black[i] != Color::kEmpty) {
          actual[i] = Color::kBlack;
        } else if (white[i] != Color::kEmpty) {
          actual[i] = Color::kWhite;
        }
      }

      MG_CHECK(test.expected == actual)
          << "\nexpected:\n"
          << ToPrettyString(test.expected) << "\n\nactual:\n"
          << ToPrettyString(actual) << "\n";

      MG_LOG(INFO) << "expected:\n" << ToPrettyString(test.expected);
      MG_LOG(INFO) << "actual:\n" << ToPrettyString(actual);
    }
  }
};

TEST_F(PassAliveTest, 9x9) {
  if (kN != 9) {
    return;
  }

  TestCase tests[] = {
      {// board state
       R"(.X.XO....
          XXXXO....
          OOOOO....
          .........
          .........
          .........
          .........
          .........
          .........)",
       // expected result
       R"(XXXXO....
          XXXXO....
          OOOOO....
          .........
          .........
          .........
          .........
          .........
          .........)"},

      {// board state
       R"(....O.O..
          ....OOO..
          ......OOO
          ......O..
          ......OOO
          ......OXX
          ......OX.
          ......OXX
          ......OX.)",
       // expected result
       R"(....OOOOO
          ....OOOOO
          ......OOO
          ......OOO
          ......OOO
          ......OXX
          ......OXX
          ......OXX
          ......OXX)"},

      {// board state
       R"(...X.....
          XXXX.....
          .X.X.....
          XXXX.....
          .........
          .........
          .........
          .........
          .........)",
       // expected result
       R"(XXXX.....
          XXXX.....
          XXXX.....
          XXXX.....
          .........
          .........
          .........
          .........
          .........)"},

      {// Top-left region is not pass-alive because it has two empty points that
       // aren't adjacent to the enclosing chain.
       // board state
       R"(...X.....
          ...X.....
          XXXX.....
          .X.X.....
          XXXX.....
          .........
          .........
          .........
          .........)",
       // expected result
       R"(...X.....
          ...X.....
          XXXX.....
          XXXX.....
          XXXX.....
          .........
          .........
          .........
          .........)"},

      {// Top-left region is pass-alive because only one empty point is not
       // adjacent to the enclosing chain.
       // board state
       R"(O..X.....
          ...X.....
          XXXX.....
          .X.X.....
          XXXX.....
          .........
          .........
          .........
          .........)",
       // expected result
       R"(XXXX.....
          XXXX.....
          XXXX.....
          XXXX.....
          XXXX.....
          .........
          .........
          .........
          .........)"},

      {// board state
       R"(.........
          .........
          .........
          .........
          .........
          .........
          .........
          OOOOO....
          O.O.O....)",
       // expected result
       R"(.........
          .........
          .........
          .........
          .........
          .........
          .........
          OOOOO....
          OOOOO....)"},

      {// board state
       R"(.........
          ..XXXXXX.
          ..X..X.X.
          ..XXXXXX.
          .........
          .........
          .........
          .........
          .........)",
       // expected result
       R"(.........
          ..XXXXXX.
          ..XXXXXX.
          ..XXXXXX.
          .........
          .........
          .........
          .........
          .........)"},

      {// board state
       R"(.........
          .OOOOOOO.
          .O.OXXXO.
          .OOOXXXO.
          .OX.XXXO.
          .OXXXXOO.
          .OOOOOO..
          .........
          .........)",
       // expected result
       R"(.........
          .OOOOOOO.
          .OOOOOOO.
          .OOOOOOO.
          .OOOOOOO.
          .OOOOOOO.
          .OOOOOO..
          .........
          .........)"},

      {// board state
       R"(.........
          .........
          .........
          .........
          .........
          .........
          OOOOO....
          .O.XOO...
          O.O.XO...)",
       // expected result
       R"(.........
          .........
          .........
          .........
          .........
          .........
          OOOOO....
          OOOOOO...
          OOOOOO...)"},

      {// board state
       R"(OXX.X.X.O
          OX.XOXXXX
          OXXOOOOOO
          OOOO.....
          .........
          .........
          .........
          .........
          .........)",
       // expected result
       R"(OXXXXXXXX
          OXXXOXXXX
          OXXOOOOOO
          OOOO.....
          .........
          .........
          .........
          .........)"},

      {// board state
       R"(..O.O.XX.
          .OOOO.X.X
          OO.....XX
          .........
          .........
          X......OO
          .XX...O.O
          X.X..OO.O
          .X.X.O.O.)",
       // expected result
       R"(..O.O.XXX
          .OOOO.XXX
          OO.....XX
          .........
          .........
          X......OO
          .XX...OOO
          X.X..OOOO
          .X.X.OOOO)"},

      {// board state
       R"(.OOOOOOO.
          OOX..XX.O
          O...XOX.O
          O...X.X.O
          OXXX.XX.O
          OXO.X...O
          OX.XX.XXO
          O.XX..OOO
          .OOOOOOX.)",
       // expected result
       R"(OOOOOOOOO
          OOX..XX.O
          O...XXX.O
          O...XXX.O
          OXXXXXX.O
          OXXXX...O
          OXXXX.XXO
          O.XX..OOO
          OOOOOOOOO)"},

      {// board state
       R"(.........
          .........
          .........
          .........
          .........
          .........
          .........
          .........
          .........)",
       // expected result
       R"(.........
          .........
          .........
          .........
          .........
          .........
          .........
          .........
          .........)"},

      {// board state
       R"(.........
          .........
          ...XX....
          ..X..X...
          ..X..X...
          ...XX....
          .........
          .........
          .........)",
       // expected result
       R"(.........
          .........
          ...XX....
          ..X..X...
          ..X..X...
          ...XX....
          .........
          .........
          .........)"},

      {// board state
       R"(.........
          .........
          .XXXX....
          .X..X....
          .X..XXX..
          .XXXX.X..
          ....XXX..
          .........
          .........)",
       // expected result
       R"(.........
          .........
          .XXXX....
          .XXXX....
          .XXXXXX..
          .XXXXXX..
          ....XXX..
          .........
          .........)"},

      {// board state
       R"(.........
          .XXXXX...
          .X...X...
          .X...X...
          .X...XXX.
          .XXXXX.X.
          .....XXX.
          .........
          .........)",
       // expected result
       R"(.........
          .XXXXX...
          .X...X...
          .X...X...
          .X...XXX.
          .XXXXX.X.
          .....XXX.
          .........
          .........)"},

      {// board state
       R"(.........
          .........
          ....X....
          .........
          .........
          .........
          .........
          .........
          .........)",
       // expected result
       R"(.........
          .........
          ....X....
          .........
          .........
          .........
          .........
          .........
          .........)"},

      {// board state
       R"(.........
          .........
          .........
          .........
          .........
          .........
          .........
          ....O....
          .........)",
       // expected result
       R"(.........
          .........
          .........
          .........
          .........
          .........
          .........
          ....O....
          .........)"},

      {// board state
       R"(O........
           ....OOOO.
           .OOOOXXO.
           .OXXX.XO.
           .OX..XXO.
           .OXXXOOO.
           .OOOOO...
           .........
           .........)",
       // expected result
       R"(O........
          ....OOOO.
          .OOOOXXO.
          .OXXX.XO.
          .OX..XXO.
          .OXXXOOO.
          .OOOOO...
          .........
          .........)"},

      {// Seki
       // board state
       R"(.OX.XO...
          OOOXXO...
          .OXXOO...
          OXXXO....
          XX.XO....
          OOXXO....
          .OOOO....
          .........
          .........)",
       // expected result
       R"(.OX.XO...
          OOOXXO...
          .OXXOO...
          OXXXO....
          XX.XO....
          OOXXO....
          .OOOO....
          .........
          .........)"},
  };

  RunTests(tests);
}

TEST_F(PassAliveTest, 19x19) {
  if (kN != 19) {
    return;
  }

  TestCase tests[] = {
      {// board state
       R"(X.X....OO.......X.X
          .XX....O.OOO....XX.
          .X.....OO..O.....XO
          XX.OO....OOO.....XX
          ...O.OOO...........
          ...OO.XO...........
          .....OOO...........
          ...................
          .XXX...............
          .X.X...............
          .X.X............OOO
          X.X.............O.O
          .XX..............O.
          XX................O
          .................O.
          OO...............OO
          .O.....OO........O.
          .OOOO.O.O........OO
          O..O.O.OO.......O..)",
       // expected result
       R"(X.X....OO.......XXX
          .XX....O.OOO... XXX
          .X.....OO..O.....XX
          XX.OO....OOO.....XX
          ...OOOOO...........
          ...OOOOO...........
          .....OOO...........
          ...................
          .XXX...............
          .XXX...............
          .XXX............OOO
          XXX.............OOO
          XXX..............OO
          XX................O
          .................OO
          OO...............OO
          .O.....OO........OO
          .OOOO.O.O........OO
          O..O.O.OO.......O..)"},

      {// board state
       R"(.X.X.XXXX.XXXX.X.X.
          X.XXXX..X.X..XXXX.X
          XX.X..X.X.X.X..X.X.
          X.X.XX.XX.XX.XX.X.X
          .X.XX.XX...XX.XX.X.
          .X.X...........X.X.
          X.X.............X.X
          .X...............X.
          ...................
          XXX.....XXXXX......
          ..X.....X...X.XXXXX
          OXXXX...X..XX.X....
          O.X.X...X.O.XXX....
          ..XXX...X...X.X....
          XXX.....XXXXXXXXXXX
          ..............O....
          OOOOO....OOOOO.OOOO
          .O..OO...O...OOO...
          O.O.XO...O.O.O.O.OO)",
       // expected result
       R"(XXXXXXXXX.XXXX.X.X.
          XXXXXX..X.X..XXXX.X
          XX.X..X.X.X.X..X.X.
          X.X.XX.XX.XX.XX.X.X
          .X.XX.XX...XX.XX.X.
          .X.X...........X.X.
          X.X.............X.X
          .X...............X.
          ...................
          XXX.....XXXXX......
          XXX.....XXXXX.XXXXX
          XXXXX...XXXXX.X....
          XXXXX...XXXXXXX....
          XXXXX...XXXXXXX....
          XXX.....XXXXXXXXXXX
          ..............O....
          OOOOO....OOOOO.OOOO
          .O..OO...O...OOO...
          O.O.XO...O.O.O.O.OO)"},

      {// board state
       R"(.X.X.XXXX.XXXX.X.X.
          X.XXXX..X.X..XXXX.X
          XX.X..X.X.X.X..X.X.
          X.X.XX.XX.XX.XX.X.X
          .X.XX.XX...XX.XX.X.
          .X.X...........X.X.
          X.X.............X.X
          .X...............X.
          ...................
          XXX.....XXXXX......
          ..X.....X...X.XXXXX
          OXXXX...X..XX.X....
          ..X.X...X...XXX....
          ..XXX...X...X.X....
          XXX.....XXXXXXXXXXX
          ..............O....
          OOOOO....OOOOO.OOOO
          .O..OO...O...OOO...
          O.O..O...O.O.O.O.OO)",
       // expected result
       R"(XXXXXXXXX.XXXX.X.X.
          XXXXXX..X.X..XXXX.X
          XX.X..X.X.X.X..X.X.
          X.X.XX.XX.XX.XX.X.X
          .X.XX.XX...XX.XX.X.
          .X.X...........X.X.
          X.X.............X.X
          .X...............X.
          ...................
          XXX.....XXXXX......
          ..X.....X...X.XXXXX
          OXXXX...X..XX.X....
          ..X.X...X...XXX....
          ..XXX...X...X.X....
          XXX.....XXXXXXXXXXX
          ..............O....
          OOOOO....OOOOO.OOOO
          .O..OO...O...OOO...
          O.O..O...O.O.O.O.OO)"},

      {// Whole board seki
       // board state
       R"(O.XXXOOOO.O.XOOO.O.
          .OOXXXXOOOXXXXO.OXX
          XOXX.XOOOOOOOXOOOOX
          XXOOXXOXXOXXOXOXXXX
          XXOOOOXXXX.XOXX.XOX
          .XXO.XXXOOXXOXOXXOO
          OXOOOOOOOXXOOOOOXXO
          OOXXXOX.OOXXO.OOXOO
          OOXXXOOOOXX.XOOXOOX
          O.OXXOXOXXXXXOOX..X
          OOOXXXXXOXOXXOXXXXX
          XOX.XXOOOOOOXXOOOOO
          XXXXXOOOOX.OOXO..XO
          XXOOXOOXXXOOXOOXXXX
          XOO.XOOOXXOOXXXOOOO
          XXOXXOXOOX.OOX.OXO.
          XOOXOXXXXXOOXXOOXOO
          XXOOOXXXOXO.OXXOXXX
          XOO.OX.XOOOOOX.X...)",
       // expected result
       R"(O.XXXOOOO.O.XOOO.O.
          .OOXXXXOOOXXXXO.OXX
          XOXX.XOOOOOOOXOOOOX
          XXOOXXOXXOXXOXOXXXX
          XXOOOOXXXX.XOXX.XOX
          .XXO.XXXOOXXOXOXXOO
          OXOOOOOOOXXOOOOOXXO
          OOXXXOX.OOXXO.OOXOO
          OOXXXOOOOXX.XOOXOOX
          O.OXXOXOXXXXXOOX..X
          OOOXXXXXOXOXXOXXXXX
          XOX.XXOOOOOOXXOOOOO
          XXXXXOOOOX.OOXO..XO
          XXOOXOOXXXOOXOOXXXX
          XOO.XOOOXXOOXXXOOOO
          XXOXXOXOOX.OOX.OXO.
          XOOXOXXXXXOOXXOOXOO
          XXOOOXXXOXO.OXXOXXX
          XOO.OX.XOOOOOX.X...)"},
  };

  RunTests(tests);
}

}  // namespace
}  // namespace minigo
